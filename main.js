/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var{Plugin:g,TFile:d,Notice:y,MarkdownView:F,Modal:b,Setting:k}=require("obsidian"),f=class extends b{constructor(e,a,t){super(e),this.plugin=a,this.file=t,this.depth=1,this.template=a.settings.promptTemplate,this.templateFile=null}getTemplateFiles(){return this.app.vault.getMarkdownFiles().filter(a=>{let t=a.path.toLowerCase();return t.includes("template")||t.includes("templates")||t.startsWith("_templates/")||t.startsWith(".templates/")||a.basename.toLowerCase().startsWith("template")})}onOpen(){let{contentEl:e}=this;e.empty(),e.createEl("h2",{text:"Select Recursion Depth and Customize Prompt"}),new k(e).setName("Depth").setDesc("Choose recursion depth (1-4)").addSlider(l=>l.setLimits(1,4,1).setValue(1).setDynamicTooltip().onChange(h=>{this.depth=h}));let a=new k(e).setName("Template File").setDesc("Select a template file for the LLM to follow (optional)").addDropdown(l=>{l.addOption("","No template"),this.getTemplateFiles().forEach(p=>{l.addOption(p.path,p.basename)}),l.onChange(async p=>{if(p){if(this.templateFile=this.app.vault.getAbstractFileByPath(p),this.templateFile instanceof d){let w=await this.app.vault.read(this.templateFile);this.updateTemplatePreview(w)}}else this.templateFile=null,this.updateTemplatePreview("")})}),t=e.createDiv();t.style.margin="1em 0",t.style.display="none";let n=t.createEl("div",{text:"Template Preview:",cls:"setting-item-name"}),i=t.createEl("pre",{cls:"template-preview"});i.style.maxHeight="150px",i.style.overflow="auto",i.style.padding="8px",i.style.backgroundColor="var(--background-secondary)",i.style.borderRadius="4px",this.previewContainer=t,this.previewElement=i;let o=e.createDiv();o.style.margin="1em 0";let r=o.createEl("textarea");r.value=this.template,r.style.width="100%",r.style.height="300px",r.style.resize="vertical",r.addEventListener("input",l=>{this.template=l.target.value});let s=e.createDiv();s.style.textAlign="right",s.style.marginTop="1em",s.createEl("button",{text:"Copy",cls:"mod-cta"}).addEventListener("click",async()=>{await this.plugin.copyFileAndLinks(this.file,this.depth,this.template,this.templateFile),this.close()})}updateTemplatePreview(e){e?(this.previewElement.setText(e),this.previewContainer.style.display="block"):(this.previewElement.setText(""),this.previewContainer.style.display="none")}onClose(){let{contentEl:e}=this;e.empty()}},m=class extends g{async onload(){await this.loadSettings(),this.addCommand({id:"copy-file-and-links",name:"Copy File and Links Content",checkCallback:e=>{let a=this.app.workspace.getActiveViewOfType(F);return a?(e||new f(this.app,this,a.file).open(),!0):!1}}),this.fileMenuEventRef=this.app.workspace.on("file-menu",(e,a)=>{a instanceof d&&a.extension==="md"&&e.addItem(t=>{t.setTitle("Copy file and links").setIcon("files").onClick(()=>new f(this.app,this,a).open())})}),this.registerEvent(this.fileMenuEventRef)}onunload(){this.app.workspace.offref(this.fileMenuEventRef)}async loadSettings(){this.settings=Object.assign({},v,await this.loadData())}async saveSettings(){await this.saveData(this.settings)}async copyFileAndLinks(e,a,t,n){let i=new Set,o=await this.buildFileTree(e,a,i),r=await this.renderFileTree(o),s="";n&&(s=await this.app.vault.read(n));let c=this.generateLLMPrompt(e.basename,r,a,t,s);await navigator.clipboard.writeText(c),new y(`Copied LLM prompt to clipboard (depth: ${a})`)}getForwardLinks(e){let a=this.app.metadataCache.getFileCache(e),t=new Set;if(a!=null&&a.links)for(let n of a.links){let i=this.app.metadataCache.getFirstLinkpathDest(n.link,e.path);i instanceof d&&t.add(i)}return Array.from(t)}async buildFileTree(e,a,t,n=0,i=!0){if(n>a||t.has(e.path))return null;t.add(e.path);let o={file:e,content:await this.app.vault.read(e),depth:n,backlinks:[],forwardLinks:[]};if(n===0){let s=this.app.metadataCache.getBacklinksForFile(e);if(s)for(let[c,l]of s.data){let h=this.app.vault.getAbstractFileByPath(c);if(h instanceof d&&!t.has(h.path)){let p=await this.buildFileTree(h,a,new Set(t),n+1,!0);p&&o.backlinks.push(p)}}}let r=this.getForwardLinks(e);for(let s of r)if(!t.has(s.path)){let c=await this.buildFileTree(s,a,t,n+1,!1);c&&o.forwardLinks.push(c)}return o}getForwardLinks(e){let a=this.app.metadataCache.getFileCache(e),t=new Set;if(a){if(a.links)for(let n of a.links){let i=this.app.metadataCache.getFirstLinkpathDest(n.link,e.path);i instanceof d&&t.add(i)}if(a.embeds)for(let n of a.embeds){let i=this.app.metadataCache.getFirstLinkpathDest(n.link,e.path);i instanceof d&&t.add(i)}}return Array.from(t)}async renderFileTree(e,a=""){if(!e)return"";let t="",n=e.depth>0?` (Depth ${e.depth})`:"";if(t+=`# ${e.file.basename}${n}

`,t+=e.content,t+=`

---

`,e.backlinks.length>0){t+=`# Backlinks to ${e.file.basename}${n}

`;for(let i of e.backlinks)t+=await this.renderFileTree(i,a+"  ")}if(e.forwardLinks.length>0){t+=`# Forward Links from ${e.file.basename}${n}

`;for(let i of e.forwardLinks)t+=await this.renderFileTree(i,a+"  ")}return t}generateLLMPrompt(e,a,t,n,i){let o=n.replace("{filename}",e).replace("{depth}",t).replace("{content}",a);return i&&(o+=`

Please follow this template structure when creating the new note:

${i}`),o}},v={promptTemplate:`Based on the following content from "{filename}", its backlinks, and forward links (recursion depth: {depth}), analyze and synthesize the information to create an enhanced Obsidian note. Consider the following aspects:

1. Key Concepts:
   - Identify and explain main ideas
   - Highlight important relationships between concepts
   - Suggest potential connections to other topics

2. Knowledge Structure:
   - Create a hierarchical organization of information
   - Identify gaps in the current content
   - Propose areas for further research

3. Obsidian-Specific Features:
   - Suggest relevant internal links ([[link]])
   - Recommend appropriate tags (#tag)
   - Identify opportunities for MOCs (Maps of Content)

Here's the source content:

{content}

Please provide a comprehensive response that includes:
1. A structured summary of the key points
2. Suggested connections and relationships
3. Potential areas for expansion
4. Recommended tags and links
5. Any additional insights or patterns you've identified

Format the response in an Obsidian-flavored Markdown codeblock, utilizing appropriate syntax for links, tags, and other Obsidian features.`};module.exports=m;
